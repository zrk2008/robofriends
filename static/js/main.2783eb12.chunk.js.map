{"version":3,"sources":["components/searchbox.js","components/card.js","components/cardlist.js","components/scroll.js","components/errorboundry.js","components/counterbutton.js","components/header.js","containers/app.js","actions.js","constants.js","reducers.js","registerServiceWorker.js","index.js"],"names":["SearchBox","searchfield","searchChange","console","log","className","type","placeholder","onChange","Card","id","name","email","src","alt","CardList","cardComponent","robots","map","user","key","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","errorInfo","this","setState","Component","CounterButton","updateCounter","count","nextProps","nextState","color","onClick","Header","App","onRequestRobots","onSearchChange","isPending","filterRobots","filter","robot","toLowerCase","includes","React","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","initialStateSearch","initialStateRobots","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","rootReducer","combineReducers","action","Object","assign","arror","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.2783eb12.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n    console.log('SearchBox')\r\n    return (\r\n        <div className=\"pa2\">\r\n            <input\r\n                className=\"pa3 ba b--green bg-lightest-blue\"\r\n                type=\"search\"\r\n                placeholder=\"search robots\"\r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;\r\n","import React from \"react\";\r\n\r\nconst Card = ({ id, name, email }) => {\r\n    return (\r\n        <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n            <img src={`https://robohash.org/${id}?200x200`} alt=\"robots\"/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./card\";\r\n\r\n\r\nconst CardList = ({ robots }) => {\r\n\r\n    const cardComponent = robots.map(user => {\r\n        console.log('CardList');\r\n        return <Card key={user.id} id={user.id} name={user.name} email={user.email}/>\r\n    })\r\n    // if(true) {\r\n    //     throw new Error('NOOOOO!');\r\n    // }\r\n    return (\r\n        <div>\r\n            {cardComponent}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY: 'scroll', border: '2px solid black', height: '700px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class ErrorBoundry extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        this.setState({ hasError: true })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Oooops. That is not good.</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nclass CounterButton extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            count: 0\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        if (this.state.count !== nextState.count) {\r\n            return true\r\n        }\r\n\r\n        return false\r\n    }\r\n\r\n    updateCounter = () => {\r\n            this.setState(state => { return {count: state.count + 1 }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        console.log('CounterButton')\r\n        return (\r\n            <button color={this.props.color} onClick={this.updateCounter}>\r\n                Count: {this.state.count}\r\n            </button>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default CounterButton;\r\n","import React, { Component } from \"react\";\r\nimport CounterButton from \"./counterbutton\";\r\n\r\nclass Header extends Component {\r\n    // shouldComponentUpdate(nextProps, nextState, nextContext) {\r\n    //     return false;\r\n    // }\r\n\r\n    render() {\r\n        console.log('Header')\r\n        return (\r\n            <div>\r\n                <h1 className=\"f1\">RoboFriends</h1>\r\n                <CounterButton color={'red'} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport SearchBox from '../components/searchbox';\r\nimport CardList from \"../components/cardlist\";\r\nimport Scroll from '../components/scroll';\r\nimport ErrorBoundry from \"../components/errorboundry\";\r\nimport './app.css'\r\n\r\nimport { setSearchField, requestRobots } from \"../actions\";\r\nimport Header from \"../components/header\";\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchfield: state.searchRobots.searchfield,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    }\r\n}\r\n\r\nclass App extends React.Component {\r\n\r\n    componentDidMount() {\r\n        this.props.onRequestRobots();\r\n    }\r\n\r\n\r\n    render() {\r\n        const { searchfield, onSearchChange, robots, isPending } = this.props;\r\n        const filterRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase())\r\n        })\r\n        if (isPending) {\r\n            return <h1>Loading</h1>\r\n        } else {\r\n            return (\r\n                <div className=\"tc\">\r\n                    <Header />\r\n                    <SearchBox searchChange={onSearchChange}/>\r\n                    <Scroll>\r\n                        <ErrorBoundry>\r\n                            <CardList robots={filterRobots}/>\r\n                        </ErrorBoundry>\r\n                    </Scroll>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from \"./constants\";\r\n\r\nexport const setSearchField = (text) => {\r\n     return {\r\n        type: CHANGE_SEARCH_FIELD,\r\n        payload: text\r\n    }\r\n}\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({type: REQUEST_ROBOTS_PENDING});\r\n    fetch('http://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\r\n}\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD'\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from \"./constants\";\r\n\r\n\r\nconst initialStateSearch = {\r\n    searchfield: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n    switch (action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, {searchfield: action.payload })\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n    switch (action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, { isPending: true })\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, { robots: action.payload, isPending: false })\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, { arror: action.payload, isPending: false })\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\n//import { createLogger } from \"redux-logger\";\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport 'tachyons';\nimport App from './containers/app';\nimport { searchRobots, requestRobots } from \"./reducers\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\n//const logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots})\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nReactDOM.render(<Provider store={store} ><App /></Provider>, document.getElementById('root'));\n\nregisterServiceWorker();\n"],"sourceRoot":""}